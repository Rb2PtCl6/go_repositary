package main

import (
	"fmt"
)

// —á–∏—Ç–∞–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–±–∞–π—Ç–æ–≤–æ
func printBytes(s string) {
	fmt.Print("\t")
	for i := 0; i < len(s); i++ {
		fmt.Printf("%5c", s[i])
	}
	fmt.Println()
	fmt.Print("\t")
	for i := 0; i < len(s); i++ {
		fmt.Printf("|%4d", s[i])
	}
	fmt.Println()
}

// —á–∏—Ç–∞–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
func printRunes(s string) {
	fmt.Print("\t")
	for _, c := range s {
		fmt.Printf("%5c", c)
	}
	fmt.Println()
	fmt.Print("\t")
	for _, c := range s {
		fmt.Printf("|%4d", c)
	}
	fmt.Println()
}

func main() {
	names := []string{
		"e.g. or i.e.?", // –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
		"t√©l√©graphe",    // —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
		"Rƒ´gas tor≈Üi",   // –ª–∞—Ç—ã—à—Å–∫–∏–π
		"—Ç–µ–ª–µ–≥—Ä–∞—Ñ",      // —Ä—É—Å—Å–∫–∏–π
		"’ø’•’¨’•’£÷Ä’°÷Ü",      // –∞—Ä–º—è–Ω—Å–∫–∏–π
		"·É¢·Éî·Éö·Éî·Éí·É†·Éê·É§·Éò",     // –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π
		"ÈõªÂ†±",            // –∫–∏—Ç–∞–π—Å–∫–∏–π
		"k·∫πt·∫πk·∫πt·∫π",      // —è–∑—ã–∫ –ô–æ—Ä—É–±–∞
		"[ ]‚Äã‚ê†\t‚êà\b(¬†)", // —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
		"‚ù£‚àû¬º‚àõ‚ÖÄùû®",
		"‚òº‚òÅ‚òÇüòÄüá¶üá∂",
	}
	for _, name := range names {
		fmt.Println(name)
		printBytes(name)
		printRunes(name)
		fmt.Println("0...4...8.0...4...8.0...4...8.0...4...8.0...4...8.0...4...8.0...4...8.0...4...8.")
	}
}
